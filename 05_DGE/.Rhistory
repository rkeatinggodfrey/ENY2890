if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.18")
## read in the already-concatenated counts file
counts <- read.csv("counts_example.csv", header=T)
## if your counts file still has the information for feature
## mapping at the bottom, you can get rid of it using
counts <- counts %>%
filter(!grepl('_', gene_id))
setwd("~/Documents/2023/03_CURE/ENY2890/05_DGE")
## read in the already-concatenated counts file
counts <- read.csv("counts_example.csv", header=T)
## if your counts file still has the information for feature
## mapping at the bottom, you can get rid of it using
counts <- counts %>%
filter(!grepl('_', gene_id))
library(dplyr)
library(DESeq2)
library(ggplot2)
## if your counts file still has the information for feature
## mapping at the bottom, you can get rid of it using
counts <- counts %>%
filter(!grepl('_', gene_id))
library(tidyverse)
## if your counts file still has the information for feature
## mapping at the bottom, you can get rid of it using
counts <- counts %>%
filter(!grepl('_', gene_id))
View(counts)
View(counts)
## Import metadata (colData) ###
metadata <- read.csv("/Users/rkeatinggodfrey/Documents/2023/03_CURE/DESeq2/DGE_cure/metadata_example.csv",
header=T)
## read in the already-concatenated counts file
counts <- read.csv("counts_example.csv", header=T)
## create a new data frame that contains only the columns you need
## for the example metadata this is in columns 1, 2, and 3.
meta <- metadata[,c(1,2,3)]
## you can rename the columns to match the rest of the script
colnames(meta) <-c("sample","sex","body_part")
## make sure sex and body part are factors (categorical data)
## for more about factors and data types in R, see:
## https://swcarpentry.github.io/r-novice-inflammation/12-supp-factors.html
meta$sex <-as.factor(meta$sex)
meta$body_part <-as.factor(meta$body_part)
## check that they are factors (this should return "TRUE")
is.factor(meta$sex)
is.factor(meta$body_part)
View(meta)
### Construct a DESeq data set matrix object ###
## This object stores all of the input data needed to run differential
## expression analysis
dds.gen <-DESeqDataSetFromMatrix(countData=counts, # the counts data object
colData=meta, # the meta data
design=~sex, # the statistical design
tidy=T)
### Run DESeq analyis using the DESeq function ###
## define this as a new object called "dds.gen.de" so you
## do not overwrite your matrix
dds.gen.de <- DESeq(dds.gen)
## Get a table of the results
## This is going to summarize the findings into a table
## And pick out the specific comparison you are trying to make
## Remember in this example data set I only have genitalia samples
## so I want the results to look at the variable "sex"
## and the levels "males" and "females"
results.gen <-results(dds.gen.de, contrast=c("sex","Male","Female"))
## Look at summary of analysis
## This will tell you how many genes showed
## a positive difference in expression (LFC = log fold change)
## a negative difference in expression
## in my case in Males vs Females as stated above
summary(results.gen)
## Look at the top of the results file ordered by adjusted p-value
results.gen <- results.gen[order(results.gen$padj),]
head(results.gen)
## You can make a PCA plot of the data to see where samples cluster
## first transform the data
res.transform <- rlog(dds.gen) # this should be your matrix object
## then use the PCA plot function to display comparisons
## across one of your variables
plotPCA(res.transform, intgroup="sex")
## (1) Turn the results from DESeq2 into a dataframe
## here the row names should be the gene IDs just like
## in the annotation file
sig <- as.data.frame(results.gen) # data frame of all results from DESeq2
sig <- subset(sig,sig$padj < 0.05) # subset to significant results
## (2) Normalized counts from DESeq function (dds.gen.de in our example)
matrix.sig <-counts(dds.gen.de, normalized = T)[rownames(sig),]
## (3) Get zscore for each row
matrix.z <-t(apply(matrix.sig,1,scale))
## now take sample IDs from your metadata and make
## them the column names
colnames(matrix.z) <- meta$sample
## (4) Ok let's make a heatmap!!
Heatmap(matrix.z, cluster_rows=T, cluster_columns=T, column_labels=colnames(matrix.z),
name="z score")
library(clusterProfiler)
library(ComplexHeatmap)
## (4) Ok let's make a heatmap!!
Heatmap(matrix.z, cluster_rows=T, cluster_columns=T, column_labels=colnames(matrix.z),
name="z score")
## (1) Use a threshold for log2fc
## this is the "sig" file you created above by selecting
## only genes that had adjusted p-values < 0.05
sig.p2 <-subset(sig,sig$log2FoldChange >2)
sig.n2 <-subset(sig,sig$log2FoldChange < -2)
sig.2 <- rbind(sig.p2,sig.n2)
## (2) Normalized counts from
matrix.sig.2 <-counts(dds.gen.de, normalized = T)[rownames(sig.2),]
nrow(matrix.sig.2)
## now take sample IDs from your metadata and make
## them the column names
colnames(matrix.z) <- meta$sample
## (4) Ok let's make a heatmap!!
Heatmap(matrix.z, cluster_rows=T, cluster_columns=T, column_labels=colnames(matrix.z),
name="z score")
## (2) Use GOs or other identifier from annotation file to subset results
## read in the annotation file made from coding sequences
## but in this case make the first column (gene IDs) the row names
annot <- read.csv("rna.annot.aa.emapper.annotations.geneID.csv", header=T,
row.names = 1)
sig.annot <- transform(merge(sig,annot,by=0),
row.names=Row.names, Row.names=NULL)
## you can alternately create this file by subsetting your annotated
## results dataframe if it's already in your global environment
sig.annot.2 <-subset(results.annotated,results.annotated$paj < 0.05)
## merge DGE with annotation file
results.annotated <-merge(results.table,annot, by=c("geneID"))
## The geneIDs are the row names in the original results table
## turn them into a column to merge with functional annotation from eggnog
library(tibble)
results.table <- as.data.frame(results.gen)
results.table <- tibble::rownames_to_column(results.table,"geneID")
## merge DGE with annotation file
results.annotated <-merge(results.table,annot, by=c("geneID"))
## read in the annotation file made from coding sequences
annot <- read.csv("rna.annot.cds.emapper.annotations.geneID.csv", header=T)
## merge DGE with annotation file
results.annotated <-merge(results.table,annot, by=c("geneID"))
sig.annot <- transform(merge(sig,annot,by=0),
row.names=Row.names, Row.names=NULL)
## (2) Use GOs or other identifier from annotation file to subset results
## read in the annotation file made from coding sequences
## but in this case make the first column (gene IDs) the row names
annot <- read.csv("rna.annot.cds.emapper.annotations.geneID.csv", header=T,
row.names = 1)
sig.annot <- transform(merge(sig,annot,by=0),
row.names=Row.names, Row.names=NULL)
## you can alternately create this file by subsetting your annotated
## results dataframe if it's already in your global environment
sig.annot.2 <-subset(results.annotated,results.annotated$padj < 0.05)
## Now choose only those genes with a particular search or GO term
## Resource: https://www.statology.org/r-partial-string-match/
sig.odor <- sig.annot[grep("odor", sig.annot$Description),]
## you could select a second term
sig.chem <- sig.annot[grep("chemo", sig.annot$Description),]
## then add the data frames together with those two terms
sig.chem <-rbind(sig.odor,sig.chem)
## Normalized counts from
matrix.chem <-counts(dds.gen.de, normalized = T)[rownames(sig.chem),]
## Now choose only those genes with a particular search or GO term
## Resource: https://www.statology.org/r-partial-string-match/
sig.odor <- sig.annot.2[grep("odor", sig.annot$Description),]
## you could select a second term
sig.chem <- sig.annot.2[grep("chemo", sig.annot$Description),]
## then add the data frames together with those two terms
sig.chem <-rbind(sig.odor,sig.chem)
## Normalized counts from
matrix.chem <-counts(dds.gen.de, normalized = T)[rownames(sig.chem),]
View(sig.annot.2)
View(sig.annot)
## you can alternately create this file by subsetting your annotated
## results dataframe if it's already in your global environment
sig.annot.2 <-subset(results.annotated,results.annotated$padj < 0.05)
setNames(sig.annot.2$geneID, rownames(sig.annot.2))
sig.annot.2 <-setNames(sig.annot.2$geneID, rownames(sig.annot.2))
rownames(sig.annot.2) <-sig.annot.2$geneID
## you can alternately create this file by subsetting your annotated
## results dataframe if it's already in your global environment
sig.annot.2 <-subset(results.annotated,results.annotated$padj < 0.05)
rownames(sig.annot.2) <-sig.annot.2$geneID
View(sig.annot.2)
sig.annot.2 <-sig.annot.2[,2-27]
View(sig.annot.2)
sig.annot.2 <-sig.annot.2[,c(2-27)]
View(sig.annot.2)
## you can alternately create this file by subsetting your annotated
## results dataframe if it's already in your global environment
sig.annot.2 <-subset(results.annotated,results.annotated$padj < 0.05)
rownames(sig.annot.2) <-sig.annot.2$geneID
## Now choose only those genes with a particular search or GO term
## Resource: https://www.statology.org/r-partial-string-match/
sig.odor <- sig.annot.2[grep("odor", sig.annot$Description),]
## you could select a second term
sig.chem <- sig.annot.2[grep("chemo", sig.annot$Description),]
## then add the data frames together with those two terms
sig.chem <-rbind(sig.odor,sig.chem)
## Normalized counts from
matrix.chem <-counts(dds.gen.de, normalized = T)[rownames(sig.chem),]
## get zscore for each row
matrix.z <-t(apply(matrix.chem,1,scale))
## now take sample IDs from your metadata and make
## them the column names
colnames(matrix.z) <- meta$sample
## Ok let's make a heatmap!!
Heatmap(matrix.z, cluster_rows=T, cluster_columns=T, column_labels=colnames(matrix.z),
name="z score")
sig.annot.2 <-sig.annot.2[,c(2:27)]
View(sig.annot.2)
