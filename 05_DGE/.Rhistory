sig.annot <- transform(merge(sig,annot,by=0),
row.names=Row.names, Row.names=NULL)
## Normalized counts from DESeq function (dds.gen.de in our example)
matrix.sig <-counts(dds.gen.de, normalized = T)[rownames(sig.annot),]
## get zscore for each row
matrix.z <-t(apply(matrix.sig,1,scale))
## now take sample IDs from your metadata and make
## them the column names
colnames(matrix.z) <- meta$sample
## Ok let's make a heatmap!!
Heatmap(matrix.z, cluster_rows=T, cluster_columns=T, column_labels=colnames(matrix.z),
name="z score", row_labels = sig.annot$Preferred_name)
sig.annot$GOs
sig.annot.olf <- apply(sig.annot, 1, function(r) any(r %in% c("GO:0007635", "GO:0031849")))
sig.annot.olf <- sig.annot %>% filter_at(vars(GOs),
any.vars(. %in% c("GO:0007635",
"GO:0031849",
"GO:1990834",
"GO:0005549",
"GO:0004984")))
sig.annot.olf <- sig.annot %>% filter_at(vars(GOs),
any_vars(. %in% c("GO:0007635",
"GO:0031849",
"GO:1990834",
"GO:0005549",
"GO:0004984")))
sig.annot.olf <- sig.annot %>% filter_all,any_vars(. %in% c("GO:0007635",
sig.annot.olf <- sig.annot %>% filter_all(any_vars(. %in% c("GO:0007635",
"GO:0031849",
"GO:1990834",
"GO:0005549",
"GO:0004984")))
View(sig.annot.olf)
sig.annot.olf <- sig.annot %>% filter_all(any_vars(. %in% c("odorant")))
sig.annot.olf <- sig.annot %>% filter_all(any_vars(. %in% c("odor")))
sig.annot.olf <- sig.annot[grep("odor", sig.annot$Description),]
View(sig.annot.olf)
sig.olf <- sig.annot[grep("odor", sig.annot$Description),]
## Normalized counts from
matrix.olf <-counts(dds.gen.de, normalized = T)[rownames(sig.olf),]
## get zscore for each row
matrix.z <-t(apply(matrix.olf,1,scale))
## now take sample IDs from your metadata and make
## them the column names
colnames(matrix.z) <- meta$sample
## Ok let's make a heatmap!!
Heatmap(matrix.z, cluster_rows=T, cluster_columns=T, column_labels=colnames(matrix.z),
name="z score")
## turn the results from DESeq2 into a dataframe
## here the row names should be the gene IDs just like
## in the annotation file
sig <- as.data.frame(results.gen) # data frame of all results from DESeq2
sig <- subset(sig,sig$padj < 0.05) # subset to significant results
## Normalized counts from DESeq function (dds.gen.de in our example)
matrix.sig <-counts(dds.gen.de, normalized = T)[rownames(sig),]
## get zscore for each row
matrix.z <-t(apply(matrix.sig,1,scale))
## now take sample IDs from your metadata and make
## them the column names
colnames(matrix.z) <- meta$sample
## Ok let's make a heatmap!!
Heatmap(matrix.z, cluster_rows=T, cluster_columns=T, column_labels=colnames(matrix.z),
name="z score")
## (1) Use a threshold for log2fc
sig.p2 <-subset(sig,sig$log2FoldChange >2)
sig.n2 <-subset(sig,sig$log2FoldChange < -2)
sig.2 <- rbind(sig.p2,sig.n2)
## Normalized counts from
matrix.sig.2 <-counts(dds.gen.de, normalized = T)[rownames(sig.2),]
## get zscore for each row
matrix.z <-t(apply(matrix.sig.2,1,scale))
## now take sample IDs from your metadata and make
## them the column names
colnames(matrix.z) <- meta$sample
## Ok let's make a heatmap!!
Heatmap(matrix.z, cluster_rows=T, cluster_columns=T, column_labels=colnames(matrix.z),
name="z score")
sig.annot <- transform(merge(sig,annot,by=0),
row.names=Row.names, Row.names=NULL)
sig.olf <- sig.annot[grep("odor", sig.annot$Description),]
## Normalized counts from
matrix.olf <-counts(dds.gen.de, normalized = T)[rownames(sig.olf),]
## get zscore for each row
matrix.z <-t(apply(matrix.olf,1,scale))
## now take sample IDs from your metadata and make
## them the column names
colnames(matrix.z) <- meta$sample
## Ok let's make a heatmap!!
Heatmap(matrix.z, cluster_rows=T, cluster_columns=T, column_labels=colnames(matrix.z),
name="z score")
View(annot)
View(results.annotated)
## Now choose only those genes with a particular search or GO term
## Resource: https://www.statology.org/r-partial-string-match/
sig.odor <- sig.annot[grep("odor", sig.annot$Description),]
## you could select a second term
sig.olf <- sig.annot[grep("olf", sig.annot$Description),]
## you could select a second term
sig.olf <- sig.annot[grep("7tm", sig.annot$Description),]
View(sig.annot)
## you could select a second term
sig.chem <- sig.annot[grep("chemo", sig.annot$Description),]
View(sig.chem)
## then add the data frames together with those two terms
matrix.chem <-rbind(sig.odor,sig.chem)
## then add the data frames together with those two terms
sig.chem <-rbind(sig.odor,sig.chem)
## Normalized counts from
matrix.chem <-counts(dds.gen.de, normalized = T)[rownames(sig.chem),]
## get zscore for each row
matrix.z <-t(apply(matrix.chem,1,scale))
## now take sample IDs from your metadata and make
## them the column names
colnames(matrix.z) <- meta$sample
## Ok let's make a heatmap!!
Heatmap(matrix.z, cluster_rows=T, cluster_columns=T, column_labels=colnames(matrix.z),
name="z score")
## Volcano Plot of all targets with significance designated
ggplot(data = viz.results, aes(x = log2FoldChange, y = -log10(padj),
label = geneID))+
geom_point(color=dplyr::case_when(viz.results$padj > .0001 ~ "grey",
viz.results$log2FoldChange > 3 ~ "blue",
viz.results$log2FoldChange < -3 ~ "blue"),
size = 2, alpha = 0.65)+
geom_vline(xintercept=3, colour="blue", linetype="dashed")+
geom_vline(xintercept=-3, colour="blue", linetype="dashed")+
geom_hline(yintercept=4, colour="blue", linetype="dashed")+
ggtitle("Male vs Female Genitalia")+
xlim(-35,35)+
theme_classic()
##----- Female vs. Male genitalia -----##
## subset results table to only fields of interest
viz.results <- results.sig[,c(1,2,3,7,9,10,14,15,18,27)]
## Volcano Plot of all targets
ggplot(data = viz.results, aes(x = log2FoldChange, y = -log10(padj),
label = geneID))+
geom_point(colour="purple")+
xlim(-35,35)+ # this sets the scale for the x-axis
theme_classic()
## Volcano Plot of all targets with significance designated
ggplot(data = viz.results, aes(x = log2FoldChange, y = -log10(padj),
label = geneID))+
geom_point(color=dplyr::case_when(viz.results$padj > .0001 ~ "grey",
viz.results$log2FoldChange > 3 ~ "blue",
viz.results$log2FoldChange < -3 ~ "blue"),
size = 2, alpha = 0.65)+
geom_vline(xintercept=3, colour="blue", linetype="dashed")+
geom_vline(xintercept=-3, colour="blue", linetype="dashed")+
geom_hline(yintercept=4, colour="blue", linetype="dashed")+
ggtitle("Male vs Female Genitalia")+
xlim(-35,35)+
theme_classic()
View(viz.results)
library(tidyverse)
library(DESeq2)
library(dplyr)
library(ggplot2)
library(htmltools)
### (1) Read in counts data ###
## OPTION A: read in single file with all counts
## (compiled using Google Sheets or Excel)
## set working directory to source file location
setwd("~/Documents/2023/03_CURE/ENY2890/05_DGE")
## read in the already-concatenated counts file
counts <- read.csv("counts_example.csv", header=T)
## if your counts file still has the information for feature
## mapping at the bottom, you can get rid of it using
counts <- counts %>%
filter(!grepl('_', gene_id))
## Import metadata (colData) ###
metadata <- read.csv("/Users/rkeatinggodfrey/Documents/2023/03_CURE/DESeq2/DGE_cure/metadata_example.csv",
header=T)
## create a new data frame that contains only the columns you need
## for the example metadata this is in columns 1, 2, and 3.
meta <- metadata[,c(1,2,3)]
## you can rename the columns to match the rest of the script
colnames(meta) <-c("sample","sex","body_part")
## make sure sex and body part are factors (categorical data)
## for more about factors and data types in R, see:
## https://swcarpentry.github.io/r-novice-inflammation/12-supp-factors.html
meta$sex <-as.factor(meta$sex)
meta$body_part <-as.factor(meta$body_part)
## check that they are factors (this should return "TRUE")
is.factor(meta$sex)
is.factor(meta$body_part)
### Construct a DESeq data set matrix object ###
## This object stores all of the input data needed to run differential
## expression analysis
dds.gen <-DESeqDataSetFromMatrix(countData=counts, # the counts data object
colData=meta, # the meta data
design=~sex, # the statistical design
tidy=T)
### Run DESeq analyis using the DESeq function ###
## define this as a new object called "dds.gen.de" so you
## do not overwrite your matrix
dds.gen.de <- DESeq(dds.gen)
## Get a table of the results
## This is going to summarize the findings into a table
## And pick out the specific comparison you are trying to make
## Remember in this example data set I only have genitalia samples
## so I want the results to look at the variable "sex"
## and the levels "males" and "females"
results.gen <-results(dds.gen.de, contrast=c("sex","Male","Female"))
## You can save this results file as a csv in your current working directory
write.csv(results.gen,"Genitalia_Males_v_Females_Results_table_01.csv")
## The geneIDs are the row names in the original results table
## turn them into a column to merge with functional annotation from eggnog
library(tibble)
results.table <- as.data.frame(results.gen)
results.table <- tibble::rownames_to_column(results.table,"geneID")
## read in the annotation file made from coding sequences
annot <- read.csv("rna.annot.cds.emapper.annotations.geneID.csv", header=T)
## merge DGE with annotation file
results.annotated <-merge(results.table,annot, by=c("geneID"))
## note that the annotation file only has 16225 observations
## but your counts file likely has many more
## we can see which ones are missing
ids.counts <- as.data.frame(results.table$geneID)
colnames(ids.counts) <-c("geneIDs")
ids.annot <- as.data.frame(annot$geneID)
colnames(ids.annot) <-c("geneIDs")
ids.not.annot <- anti_join(ids.counts,ids.annot)
rm(ids.not.annot)
## you can save this results table that includes
## DGE and functional annotation information as a CSV
## in your working directory
write.csv(results.annotated,"Genitalia_Males_v_Females_Results_table_02.csv",
row.names = F)
rm(ids*)
rm(ids.counts)
rm(ids.annot)
library(ComplexHeatmap)
library(ggplot2)
## turn the results from DESeq2 into a dataframe
## here the row names should be the gene IDs just like
## in the annotation file
sig <- as.data.frame(results.gen) # data frame of all results from DESeq2
sig <- subset(sig,sig$padj < 0.05) # subset to significant results
## Normalized counts from DESeq function (dds.gen.de in our example)
matrix.sig <-counts(dds.gen.de, normalized = T)[rownames(sig),]
## get zscore for each row
matrix.z <-t(apply(matrix.sig,1,scale))
## now take sample IDs from your metadata and make
## them the column names
colnames(matrix.z) <- meta$sample
## Ok let's make a heatmap!!
Heatmap(matrix.z, cluster_rows=T, cluster_columns=T, column_labels=colnames(matrix.z),
name="z score")
rm(sig)
rm(matrix.sig)
rm(matrix.z)
## if it's not already in your Global Environment, import the
## annotated data frame
results.annotated <- read.csv("Genitalia_Males_v_Females_Results_table_02.csv",
header=T)
View(results.annotated)
## create a dataframe limited to significant targets
results.sig <-subset(results.annotated,results.annotated$padj <0.05)
write.csv(results.sig, "Sig_Results_Geni_Log2FC.csv")
##----- Female vs. Male genitalia -----##
## subset results table to only fields of interest
viz.results <- results.sig[,c(1,2,3,7,9,10,14,15,18,27)]
View(viz.results)
ggplot(data = viz.results, aes(x = log2FoldChange, y = -log10(padj),
label = geneID))+
geom_point(colour="purple")+
xlim(-35,35)+ # this sets the scale for the x-axis
theme_classic()
ggplot(data = viz.results, aes(x = log2FoldChange, y = -log10(padj),
label = geneID))+
geom_point(colour="pink")+
xlim(-35,35)+ # this sets the scale for the x-axis
theme_classic()
ggplot(data = viz.results, aes(x = log2FoldChange, y = -log10(padj),
label = geneID))+
geom_point(color=dplyr::case_when(viz.results$padj > .0001 ~ "grey",
viz.results$log2FoldChange > 3 ~ "blue",
viz.results$log2FoldChange < -3 ~ "blue"),
size = 2, alpha = 0.65)+
geom_vline(xintercept=3, colour="blue", linetype="dashed")+
geom_vline(xintercept=-3, colour="blue", linetype="dashed")+
geom_hline(yintercept=4, colour="blue", linetype="dashed")+
ggtitle("Male vs Female Genitalia")+
xlim(-35,35)+
theme_classic()
## Volcano Plot of sig targets with protein family labels
## here the "label =" parameter is set to PFAMs so that protein
## family names will be associated with data points
## You could use "geneID" or "Preferred_name" for this
ggplot(data = viz.results, aes(x = log2FoldChange, y = -log10(padj),
label = PFAMs))+
geom_point(color=dplyr::case_when(viz.results$padj > .0001 ~ "grey",
viz.results$log2FoldChange > 3 ~ "blue",
viz.results$log2FoldChange < -3 ~ "blue"),
size = 2, alpha = 0.65)+
geom_text_repel(data = subset(viz.results, log2FoldChange > 3
& viz.results$padj < .0001),
size          = 2.5,
box.padding   = 0.5,
point.padding = 0.05,
force         = 20,
segment.size  = 0.1,
segment.color = "grey",
max.overlaps  = 20)+
geom_text_repel(data = subset(sig.results, log2FoldChange < -3
& sig.results$padj < .0001),
size          = 2.5,
box.padding   = 0.5,
point.padding = 0.05,
force         = 20,
segment.size  = 0.1,
segment.color = "grey",
max.overlaps  = 20)+
ggtitle("Female vs Male Genitalia")+
theme_classic()
library(ggrepel)
ggplot(data = viz.results, aes(x = log2FoldChange, y = -log10(padj),
label = PFAMs))+
geom_point(color=dplyr::case_when(viz.results$padj > .0001 ~ "grey",
viz.results$log2FoldChange > 3 ~ "blue",
viz.results$log2FoldChange < -3 ~ "blue"),
size = 2, alpha = 0.65)+
geom_text_repel(data = subset(viz.results, log2FoldChange > 3
& viz.results$padj < .0001),
size          = 2.5,
box.padding   = 0.5,
point.padding = 0.05,
force         = 20,
segment.size  = 0.1,
segment.color = "grey",
max.overlaps  = 20)+
geom_text_repel(data = subset(sig.results, log2FoldChange < -3
& sig.results$padj < .0001),
size          = 2.5,
box.padding   = 0.5,
point.padding = 0.05,
force         = 20,
segment.size  = 0.1,
segment.color = "grey",
max.overlaps  = 20)+
ggtitle("Female vs Male Genitalia")+
theme_classic()
ggplot(data = viz.results, aes(x = log2FoldChange, y = -log10(padj),
label = PFAMs))+
geom_point(color=dplyr::case_when(viz.results$padj > .0001 ~ "grey",
viz.results$log2FoldChange > 3 ~ "blue",
viz.results$log2FoldChange < -3 ~ "blue"),
size = 2, alpha = 0.65)+
geom_text_repel(data = subset(viz.results, log2FoldChange > 3
& viz.results$padj < .0001),
size          = 2.5,
box.padding   = 0.5,
point.padding = 0.05,
force         = 20,
segment.size  = 0.1,
segment.color = "grey",
max.overlaps  = 20)+
geom_text_repel(data = subset(viz.results, log2FoldChange < -3
& viz.results$padj < .0001),
size          = 2.5,
box.padding   = 0.5,
point.padding = 0.05,
force         = 20,
segment.size  = 0.1,
segment.color = "grey",
max.overlaps  = 20)+
ggtitle("Female vs Male Genitalia")+
theme_classic()
View(viz.results)
ggplot(data = viz.results, aes(x = log2FoldChange, y = -log10(padj),
label = geneID))+
geom_point(color=dplyr::case_when(viz.results$padj > .0001 ~ "grey",
viz.results$log2FoldChange > 3 ~ "blue",
viz.results$log2FoldChange < -3 ~ "blue"),
size = 2, alpha = 0.65)+
geom_text_repel(data = subset(viz.results, log2FoldChange > 3
& viz.results$padj < .0001),
size          = 2.5,
box.padding   = 0.5,
point.padding = 0.05,
force         = 20,
segment.size  = 0.1,
segment.color = "grey",
max.overlaps  = 20)+
geom_text_repel(data = subset(viz.results, log2FoldChange < -3
& viz.results$padj < .0001),
size          = 2.5,
box.padding   = 0.5,
point.padding = 0.05,
force         = 20,
segment.size  = 0.1,
segment.color = "grey",
max.overlaps  = 20)+
ggtitle("Female vs Male Genitalia")+
theme_classic()
ggplot(data = viz.results, aes(x = log2FoldChange, y = -log10(padj),
label = geneID))+
geom_point(color=dplyr::case_when(viz.results$padj > .0001 ~ "grey",
viz.results$log2FoldChange > 3 ~ "blue",
viz.results$log2FoldChange < -3 ~ "blue"),
size = 2, alpha = 0.65)+
geom_text_repel(data = subset(viz.results, log2FoldChange > 3
& viz.results$padj < .0001),
size          = 2.5,
box.padding   = 0.5,
point.padding = 0.05,
force         = 20,
segment.size  = 0.1,
segment.color = "grey",
max.overlaps  = 20)+
geom_text_repel(data = subset(viz.results, log2FoldChange < -3
& viz.results$padj < .0001),
size          = 2.5,
box.padding   = 0.5,
point.padding = 0.05,
force         = 20,
segment.size  = 0.1,
segment.color = "grey",
max.overlaps  = 20)+
ggtitle("Male vs Female Genitalia")+
theme_classic()
ggplot(data = viz.results, aes(x = log2FoldChange, y = -log10(padj),
label = geneID))+
geom_point(color=dplyr::case_when(viz.results$padj > .0001 ~ "grey",
viz.results$log2FoldChange > 3 ~ "purple",
viz.results$log2FoldChange < -3 ~ "blue"),
size = 2, alpha = 0.65)+
geom_text_repel(data = subset(viz.results, log2FoldChange > 3
& viz.results$padj < .0001),
size          = 2.5,
box.padding   = 0.5,
point.padding = 0.05,
force         = 20,
segment.size  = 0.1,
segment.color = "grey",
max.overlaps  = 20)+
geom_text_repel(data = subset(viz.results, log2FoldChange < -3
& viz.results$padj < .0001),
size          = 2.5,
box.padding   = 0.5,
point.padding = 0.05,
force         = 20,
segment.size  = 0.1,
segment.color = "grey",
max.overlaps  = 20)+
ggtitle("Male vs Female Genitalia")+
theme_classic()
View(results.gen)
View(results.gen)
## (1) Turn the results from DESeq2 into a dataframe
## here the row names should be the gene IDs just like
## in the annotation file
sig <- as.data.frame(results.gen) # data frame of all results from DESeq2
View(sig)
sig <- subset(sig,sig$padj < 0.05) # subset to significant results
## (2) Normalized counts from DESeq function (dds.gen.de in our example)
matrix.sig <-counts(dds.gen.de, normalized = T)[rownames(sig),]
## (3) Get zscore for each row
matrix.z <-t(apply(matrix.sig,1,scale))
View(matrix.z)
View(meta)
View(matrix.z)
## now take sample IDs from your metadata and make
## them the column names
colnames(matrix.z) <- meta$sample
## (4) Ok let's make a heatmap!!
Heatmap(matrix.z, cluster_rows=T, cluster_columns=T, column_labels=colnames(matrix.z),
name="z score")
## (1) Use a threshold for log2fc
## this is the "sig" file you created above by selecting
## only genes that had adjusted p-values < 0.05
sig.p2 <-subset(sig,sig$log2FoldChange >2)
sig.n2 <-subset(sig,sig$log2FoldChange < -2)
sig.2 <- rbind(sig.p2,sig.n2)
## (3) Get zscore for each row
matrix.z <-t(apply(matrix.sig.2,1,scale))
## (2) Normalized counts from
matrix.sig.2 <-counts(dds.gen.de, normalized = T)[rownames(sig.2),]
## (3) Get zscore for each row
matrix.z <-t(apply(matrix.sig.2,1,scale))
## now take sample IDs from your metadata and make
## them the column names
colnames(matrix.z) <- meta$sample
## (4) Ok let's make a heatmap!!
Heatmap(matrix.z, cluster_rows=T, cluster_columns=T, column_labels=colnames(matrix.z),
name="z score")
## (2) Use GOs or other identifier from annotation file to subset results
## read in the annotation file made from coding sequences
## but in this case make the first column (gene IDs) the row names
annot <- read.csv("rna.annot.cds.emapper.annotations.geneID.csv", header=T,
row.names = 1)
sig.annot <- transform(merge(sig,annot,by=0),
row.names=Row.names, Row.names=NULL)
## Now choose only those genes with a particular search or GO term
## Resource: https://www.statology.org/r-partial-string-match/
sig.odor <- sig.annot[grep("odor", sig.annot$Description),]
## you could select a second term
sig.chem <- sig.annot[grep("chemo", sig.annot$Description),]
View(sig.chem)
## then add the data frames together with those two terms
sig.chem <-rbind(sig.odor,sig.chem)
## Normalized counts from
matrix.chem <-counts(dds.gen.de, normalized = T)[rownames(sig.chem),]
## get zscore for each row
matrix.z <-t(apply(matrix.chem,1,scale))
## now take sample IDs from your metadata and make
## them the column names
colnames(matrix.z) <- meta$sample
## Ok let's make a heatmap!!
Heatmap(matrix.z, cluster_rows=T, cluster_columns=T, column_labels=colnames(matrix.z),
name="z score")
View(sig.chem)
